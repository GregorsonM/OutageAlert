# OutageAlert
# Application Server
# OATime
#
# This file contains a library of custom time functions for OutageAlert
# 
# ---------------------------------------------------------------------------------

import datetime, pytz


def DateTimeFromJSToPython (mills):
    """Converts from JavaScript Time in milliseconds to a Python DateTime object
    """
    #JavaScript stores dates as number of milliseconds since January 01, 1970, 00:00:00 UTC (Universal Time Coordinated).
    JSBaseDate = '1970-01-01 00:00:00.000000 +0000' 

    #Create a python datetime object
    BaseDate = datetime.datetime.strptime(JSBaseDate, '%Y-%m-%d %H:%M:%S.%f %z')
    
    #Add the number of milliseconds and return the datetime object
    AdjDate = BaseDate + datetime.timedelta(milliseconds=mills) 
    return AdjDate


def DateTimeFromPythonToJS (dtObject):
    """Converts from a Python DateTime object to JavaScript time in milliseconds
    """
    #JavaScript stores dates as number of milliseconds since January 01, 1970, 00:00:00 UTC (Universal Time Coordinated).
    JSBaseDate = '1970-01-01 00:00:00.000000 +0000' 

    #Create a python datetime object
    BaseDate = datetime.datetime.strptime(JSBaseDate, '%Y-%m-%d %H:%M:%S.%f %z')

    #conduct math
    difference = dtObject - BaseDate
    milliseconds = difference.days*86400000 #milliseconds in a day
    milliseconds += difference.seconds*1000 #milliseconds in a second
    milliseconds += difference.microseconds//1000 #milliseconds in a microsecond

    return milliseconds


def PythonChangeTimeZone (UTCTime, offset):
    """Changes the time zone of a Python DateTime object to a particular offset
    """
    # adds or subtracts number of minutes. For example, PST = pytz.FixedOffset(-8*60)
    newZone = pytz.FixedOffset(offset*60)
    newDateTime = UTCTime.astimezone(newZone)
    return newDateTime


#Test Data
"""
jsmills = 1612723800000 #Sun Feb 07 2021 10:50:00 GMT-0800 (Pacific Standard Time)

newDate = DateTimeFromJSToPython(jsmills)
oldDate = DateTimeFromPythonToJS(newDate)

print("JS OLD:", jsmills)
print("JS NEW:", oldDate)
print("PY NEW:", newDate)
print("PY PST:", PythonChangeTimeZone(newDate, -8))
"""
#Correct Output
"""
JS OLD: 1612723800000
JS NEW: 1612723800000
PY NEW: 2021-02-07 18:50:00+00:00
PY PST: 2021-02-07 10:50:00-08:00
"""



def GetTimeFromURLHeader (resource):
    """Extracts the time from a HTTP URL header generated by the 'requests' module, returns a Python DateTime object.
    """
    #extract the header date
    headerDate = resource.headers.get('Date')[:-3]

    # add UTC Time Zone
    headerDate += '+0000'
    dateTimeObject = datetime.datetime.strptime(headerDate, '%a, %d %b %Y %H:%M:%S %z')
    
    return dateTimeObject